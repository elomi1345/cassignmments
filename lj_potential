import math
import numpy as np
n=0
rcut=5

nodes=np.genfromtxt('coordinate.txt', delimiter=' ', names=True)
xcord=nodes['x']
ycord=nodes['y']
zcord=nodes['z']
numnodes=len(xcord)
xnode=[]#create an empty list first
ynode=[]#create an empty list first
znode=[]
for i in range(numnodes):
        xnode.append([0]*numnodes)#And again append empty lists to original list
        ynode.append(1)
        znode.append(1)
        xnode[n]=xcord[i]    
        ynode[n]=ycord[i]
        znode[n]=zcord[i]
        n=n+1
elements=np.genfromtxt('elements.txt', delimiter=' ', names=True)
node1=elements['Node1']
node2=elements['Node2']
node3=elements['Node3']
node4=elements['Node4']
numelem=len(elements['Node1'])
for i in range(numelem):
    for j in range(numnodes):
        if math.sqrt((xnode[j]-xnode[int(node1[i])])**2+(ynode[j]-ynode[int(node1[i])])**2)<rcut:
            xneigh1=xnode[j]
            yneigh1=ynode[j]
        if math.sqrt((xnode[j]-xnode[int(node2[i])])**2+(ynode[j]-ynode[int(node2[i])])**2)<rcut:
            xneigh2=xnode[j]
            yneigh2=ynode[j]
        if math.sqrt((xnode[j]-xnode[int(node3[i])])**2+(ynode[j]-ynode[int(node3[i])])**2)<rcut:
            xneigh3=xnode[j]
            yneigh3=ynode[j]
        if math.sqrt((xnode[j]-xnode[int(node4[i])])**2+(ynode[j]-ynode[int(node4[i])])**2)<rcut:
            xneigh4=xnode[j]
            yneigh4=ynode[j] 
            
            
 
 
import math
import numpy as np
from decimal import *
n=0
pi=3.14159
#check the axis and direcion of the applied force then scale the initial configuration. 
#for example here we apply displacement to positive y and atoms will be scaled in y direction  
strain=input('strain')
rcut=input('r_cut')
eps=input('epsilon')
sigma=input('sigma')
getcontext().prec =10
nodes=Decimal(np.genfromtxt('dump.coords.txt', delimiter=' ', names=True))
xcord=nodes['x']
ycord=strain*nodes['y']
zcord=nodes['z']
numnodes=len(xcord)
xnode=[]#create an empty list first
ynode=[]
znode=[]
for i in range(numnodes):
        xnode.append([0]*numnodes)#And again append empty lists to original list
        ynode.append(0)
        znode.append(0)
        xnode[n]=xcord[i]    
        ynode[n]=ycord[i]
        znode[n]=zcord[i]
        n=n+1
elements=np.genfromtxt('elements.txt', delimiter=' ', names=True)
node1=elements['Node1']
node2=elements['Node2']
node3=elements['Node3']
node4=elements['Node4']
numelem=len(elements['Node1'])
h=(xnode[int(node1[1]-1)]-xnode[int(node1[2]-1)])/2
print(h)

for i in range(numelem):
    numneigh1=1
    numneigh2=1
    numneigh3=1
    numneigh4=1
    E1=0
    E2=0
    E3=0
    E4=0
    #E1.append(0)
    r1=[]
    r2=[]
    r3=[]
    r4=[]
    a=0
   
    for j in range(numnodes):
        r1.append(0)
        r1[j]=math.sqrt((xnode[j]-xnode[int(node1[i])-1])**2+(ynode[j]-ynode[int(node1[i])-1])**2)
        if r1[j]<rcut and r1[j]>0:
            a=(sigma/r1[j])
            E1=E1+4*eps*(a**6-a**12)
            xneigh1=xnode[j]
            yneigh1=ynode[j]
            numneigh1=numneigh1+1
        r2.append(0)
        r2[j]=math.sqrt((xnode[j]-xnode[int(node2[i])-1])**2+(ynode[j]-ynode[int(node2[i])-1])**2)
        if r2[j]<rcut and r2[j]>0:
            a=(sigma/r2[j])
            E2=E2+4*eps*(a**6-a**12)
            xneigh2=xnode[j]
            yneigh2=ynode[j]
            numneigh2=numneigh2+1
        r3.append(0)
        r3[j]=math.sqrt((xnode[j]-xnode[int(node3[i])-1])**2+(ynode[j]-ynode[int(node3[i])-1])**2)
        if r3[j]<rcut and r3[j]>0:
            a=(sigma/r3[j])
            E3=E3+4*eps*(a**6-a**12)
            xneigh3=xnode[j]
            yneigh3=ynode[j]
            numneigh3=numneigh3+1
        r4.append(0)
        r4[j]=math.sqrt((xnode[j]-xnode[int(node4[i])-1])**2+(ynode[j]-ynode[int(node4[i])-1])**2)
        if r4[j]<rcut and r4[j]>0:
            a=(sigma/r4[j])
            E4=E4+4*eps*(a**6-a**12)
            xneigh4=xnode[j]
            yneigh4=ynode[j] 
            numneigh4=numneigh4+1
    E_extended=E1*(h**2+1)/(numneigh1)+E2*(h**2+1)/(numneigh2)+E3*(h**2+1)/(numneigh3)+E4*(h**2+1)/(numneigh4)
    E_total=4/pi*E_extended
    
    print(E_extended)
    print('E_total:')
    print(E_total) 


#MINIMZATION OF ENERGY : 







    
    #h: radius of extended area
    #number of atoms in extended=(h**2/rcut**2)**number of atoms in cluster "number of neighbors for each node"
    #Energy of he not includede area : scale (4-pi/pi)
    #total energy of each element=4/pi**E_extended
#HOW TO APPLY DOSPLACEMENT TO ATOMS:    
    #FULLY ATOMISTIC PART: instead of applying displacement only to the repatoms on the boundary, apply displacement to all of the atoms homogenously. It does not need any steps. x_i=F*X_i(using Cauchy born rule) in one step apply to all atoms. reason: if apply only to the boundary atoms becuz of the large displacement the bond between atoms will break and atom will go to infinty and lost. one solution can be applying the displacement to the node in very small steps. 
#CONTINUUM PART: element have deformation gradient of F, and will assume that F will be apply to all atoms in the element and again x_i=F*X_i. 
# if have two different kinds of atoms can not use the causchy born rule becuz for example atom type 1 have deformation F1 but atom type 2 with deformation F1 does not deform homogenously but it can be a good appproximation to know the equilibrium state and assume that atom type 2 will move in equilibrium state to be in interactions with other atoms of type 2 homogenoulsy.       
